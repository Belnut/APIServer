package com.insrb.app.api;

import java.io.IOException;
import javax.servlet.http.HttpServletRequest;
import com.insrb.app.mapper.IN007TMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.Resource;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import kcb.module.v3.exception.OkCertException;
import kong.unirest.json.JSONObject;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/okcert")
public class OKCertController {

	@Autowired
	IN007TMapper in007tMapper;

	String license = "V44820000000_IDS_01_PROD_AES_license.dat";
	String SITE_NAME = "인슈로보"; // 요청사이트명
	String SITE_URL = "insrb.com";
	String CP_CD = "V44820000000"; //request.getParameter("CP_CD");;	// 회원사코드
	// session.setAttribute("PHONE_CP_CD", CP_CD);

	// String RETURN_URL = "http://"+request.getServerName()+":8080/phone_popup/phone_popup3.jsp";// 인증 완료 후 리턴될 URL (도메인 포함 full path)
	String RETURN_URL = "http://localhost:8080/okcert/rtn"; // 인증 완료 후 리턴될 URL (도메인 포함 full path)
	String RQST_CAUS_CD = "00";
	String target = "PROD"; // 테스트="TEST", 운영="PROD"
	//String popupUrl = "";	// 테스트 URL
	String popupUrl = "https://safe.ok-name.co.kr/CommonSvl"; // 운영 URL

	@Value("classpath:basic/V44820000000_IDS_01_PROD_AES_license.dat")
	private Resource licenseResource;

	@GetMapping(path = "")
	public String page(@RequestParam(name = "quote_no", required = true) String quote_no, Model model) throws OkCertException, IOException {
		String svcName = "IDS_HS_POPUP_START";

		/**************************************************************************
            okcert3 요청 정보
        **************************************************************************/
		JSONObject reqJson = new JSONObject();
		reqJson.put("RETURN_URL", RETURN_URL);
		reqJson.put("SITE_NAME", SITE_NAME);
		reqJson.put("SITE_URL", SITE_URL);
		reqJson.put("RQST_CAUS_CD", RQST_CAUS_CD);

		//reqJson.put("CHNL_CD", CHNL_CD);
		reqJson.put("RETURN_MSG", quote_no);

		String reqStr = reqJson.toString();

		/**************************************************************************
        okcert3 실행
        **************************************************************************/
		kcb.module.v3.OkCert okcert = new kcb.module.v3.OkCert();

		// '************ IBM JDK 사용 시, 주석 해제하여 호출 ************
		// okcert.setProtocol2type("22");
		// '객체 내 license를 리로드해야 될 경우에만 주석 해제하여 호출. (v1.1.7 이후 라이센스는 파일위치를 key로 하여 static HashMap으로 사용됨)
		// okcert.delLicense(license);

		//' callOkCert 메소드호출 : String license 파일 path로 라이센스 로드
		String resultStr = okcert.callOkCert(target, CP_CD, svcName, license, reqStr);

		JSONObject resJson = new JSONObject(resultStr);

		String RSLT_CD = resJson.getString("RSLT_CD");
		String RSLT_MSG = resJson.getString("RSLT_MSG");
		String MDL_TKN = "";

		boolean succ = false;

		if ("B000".equals(RSLT_CD) && resJson.has("MDL_TKN")) {
			MDL_TKN = resJson.getString("MDL_TKN");
			succ = true;
		}

		model.addAttribute("popupUrl", popupUrl);
		model.addAttribute("CP_CD", CP_CD);
		model.addAttribute("MDL_TKN", MDL_TKN);
		model.addAttribute("RSLT_CD", RSLT_CD);
		model.addAttribute("RSLT_MSG", RSLT_MSG);
		model.addAttribute("succ", succ);

		return "okcert2";
	}

	@PostMapping(path = "/rtn")
	public String rtn(HttpServletRequest request) throws OkCertException {
		String MDL_TKN = request.getParameter("mdl_tkn");

		//'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		//' 서비스명 (고정값)
		//'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		String svcName = "IDS_HS_POPUP_RESULT";

		/**************************************************************************
        okcert3 요청 정보
        **************************************************************************/
		JSONObject reqJson = new JSONObject();

		reqJson.put("MDL_TKN", MDL_TKN);
		String reqStr = reqJson.toString();

		/**************************************************************************
        okcert3 실행
        **************************************************************************/
		kcb.module.v3.OkCert okcert = new kcb.module.v3.OkCert();

		// '************ IBM JDK 사용 시, 주석 해제하여 호출 ************
		// okcert.setProtocol2type("22");
		// '객체 내 license를 리로드해야 될 경우에만 주석 해제하여 호출. (v1.1.7 이후 라이센스는 파일위치를 key로 하여 static HashMap으로 사용됨)
		// okcert.delLicense(license);

		//' callOkCert 메소드호출 : String license 파일 path로 라이센스 로드
		String resultStr = okcert.callOkCert(target, CP_CD, svcName, license, reqStr);
		/*
        // 'OkCert3 내부에서 String license 파일 path로 라이센스를 못 읽어올 경우(Executable Jar 환경 등에서 발생),
        // '메소드 마지막 파라미터에 InputStream를 사용하여 라이센스 로드
        String resultStr = null;
        if ( ! okcert.containsLicense(license) ) {			// 로드된 라이센스 정보가 HashMap에 없는 경우
            java.io.InputStream is = new java.io.FileInputStream(license);	// 환경에 맞게 InputStream 로드
            resultStr = okcert.callOkCert(target, CP_CD, svcName, license,  reqStr, is);
        } else {											// 로드된 라이센스 정보가 HashMap에 있는 경우
            resultStr = okcert.callOkCert(target, CP_CD, svcName, license,  reqStr);
        }
        */

		JSONObject resJson = new JSONObject(resultStr);

		String RSLT_CD = resJson.getString("RSLT_CD");
		String RSLT_MSG = resJson.getString("RSLT_MSG");
		String TX_SEQ_NO = resJson.getString("TX_SEQ_NO");

		String RSLT_NAME = "";
		String RSLT_BIRTHDAY = "";
		String RSLT_SEX_CD = "";
		String RSLT_NTV_FRNR_CD = "";

		String DI = "";
		String CI = "";
		String CI_UPDATE = "";
		String TEL_COM_CD = "";
		String TEL_NO = "";

		String RETURN_MSG = "";
		if (resJson.has("RETURN_MSG")) RETURN_MSG = resJson.getString("RETURN_MSG");

		if ("B000".equals(RSLT_CD)) {
			RSLT_NAME = resJson.getString("RSLT_NAME");
			RSLT_BIRTHDAY = resJson.getString("RSLT_BIRTHDAY");
			RSLT_SEX_CD = resJson.getString("RSLT_SEX_CD");
			RSLT_NTV_FRNR_CD = resJson.getString("RSLT_NTV_FRNR_CD");

			DI = resJson.getString("DI");
			CI = resJson.getString("CI");
			CI_UPDATE = resJson.getString("CI_UPDATE");
			TEL_COM_CD = resJson.getString("TEL_COM_CD");
			TEL_NO = resJson.getString("TEL_NO");
            in007tMapper.insert(RSLT_NAME,RSLT_BIRTHDAY,RSLT_SEX_CD,RSLT_NTV_FRNR_CD,DI,CI,CI_UPDATE,TEL_COM_CD,TEL_NO,RETURN_MSG);
        }
		return "phone_popup3";
	}
}
